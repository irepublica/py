###
# this code generate a combination of fix number of upper letter and/or lower case and/or number and/or special characters
# this code works as a small suppliment to crunch, where the rule of this program is not available in crunch
# the wordlist generated by this code is suitable to brute force router default password
# python3 irepublica_wordlist_generator.py --help for information
###


import argparse
import itertools

def get_arguments():
	parser = argparse.ArgumentParser()
	parser.add_argument("-nup", "--number-upper", dest="n_upper", help="number of upper letters in the string")
	parser.add_argument("-nlow", "--number-lower", dest="n_lower", help="number of lower letters in the string")
	parser.add_argument("-nnumber", "--number-number", dest="n_number", help="number of numbers in the string")
	parser.add_argument("-nspecial", "--number-special", dest="n_special", help="number of special characters in the string")
	
	parser.add_argument("-up", "--upper-letter", dest="list_upper", help="upper letters included, no argument means include all upper letters, eg -up ABD")
	parser.add_argument("-low", "--lower-letter", dest="list_lower", help="lower letters included, no argument means include all lower letters, eg -low abcdef")
	parser.add_argument("-number", "--number", dest="list_number", help="number included, no argument means include all numbers, eg -number 1234")
	parser.add_argument("-special", "--special-character", dest="list_special", help="special characters included, no argument means include all special characters")
	
	parser.add_argument("-o", "--output", dest="output", help="output file to write, eg -o test.txt")
	options = parser.parse_args()
	if not options.n_upper:
		options.n_upper = 0
		options.list_upper = []
	elif not options.list_upper:
		options.list_upper = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
	else:
		options.list_upper = [char for char in str(options.list_upper)]
    	
	if not options.n_lower:
		options.n_lower = 0
		options.list_lower = []
	elif not options.list_lower:
		options.list_lower = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
	else:
		options.list_lower = [char for char in str(options.list_lower)]
    	
	if not options.n_number:
		options.n_number = 0
		options.list_number = []
	elif not options.list_number:
		options.list_number = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
	else:
		options.list_number = [char for char in str(options.list_number)]
    	
	if not options.n_special:
		options.n_special = 0
		options.list_special = []
	elif not options.list_special:
		options.list_special = ['!', '@', '#', '$', '%', '^', '&', '*']
	else:
		options.list_special = [char for char in str(options.list_special)]

	return options


def distribute_position(n_upper=0, n_lower=0, n_number=0, n_special=0):
	position_string = "u"*n_upper + "l"*n_lower + "n"*n_number + "s"*n_special
	list_position = [''.join(p) for p in itertools.permutations(position_string)]
	list_position = set(list_position) 			# remove duplication
	list_position = list(list_position)
	return list_position
	

def generate_wordlist(list_position, list_upper, list_lower, list_number, list_special):
	n_total = len(list_position[0])
	list_word = []
	
	for position_string in list_position:
		list_word_start = [""]
		list_word_end = []
		
		for position in position_string:
			if position == "u":
				for word in list_word_start:
					for upper in list_upper:
						list_word_end.append(word+upper)
			if position == "l":
				for word in list_word_start:
					for lower in list_lower:
						list_word_end.append(word+lower)
			if position == "n":
				for word in list_word_start:
					for number in list_number:
						list_word_end.append(word+number)
			if position == "s":
				for word in list_word_start:
					for special in list_special:
						list_word_end.append(word+special)
			list_word_start = list_word_end
			list_word_end = []
			
		list_word = list_word + list_word_start
	
	
	return list_word
	

def write_file(list_word, output):
	print("number of words is " + str(len(list_word)))
	with open(output, 'w') as file_output:
		for word in list_word:
			file_output.write('%s\n' % word)
		
	
# main
options = get_arguments()
list_position = distribute_position(int(options.n_upper), int(options.n_lower), int(options.n_number), int(options.n_special))
list_word = generate_wordlist(list_position, options.list_upper, options.list_lower, options.list_number, options.list_special)
write_file(list_word, str(options.output)) 
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

